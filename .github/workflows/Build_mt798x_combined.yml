name: Build_mt798x_combined
on:
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 10 23 * * 4

jobs:
  build:
    name: Build ${{ matrix.soc || matrix.model }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - soc: "mt7981"
            config_file: "./configs/ARM/mt798x/mt7981.config"
            description: "AE86Wrt-MT7981"
            type: "standard"

          - soc: "mt7986"
            config_file: "./configs/ARM/mt798x/mt7986.config"
            description: "AE86Wrt-MT7986"
            type: "standard"
          
          - model: "mt3000"
            soc_prefix: "mt7981"
            config_file: "./configs/ARM/mt798x/mt3000.config"
            output_file: "immortalwrt-mediatek-mt7981-glinet_gl-mt3000-squashfs-sysupgrade.tar"
            output_suffix: "tar"
            description: "AE86Wrt-GL-MT3000"
            type: "gl"

          - model: "mt6000"
            soc_prefix: "mt7986"
            config_file: "./configs/ARM/mt798x/mt6000.config"
            output_file: "immortalwrt-mediatek-mt7986-glinet_gl-mt6000-squashfs-sysupgrade.bin"
            output_suffix: "bin"
            description: "AE86Wrt-GL-MT6000"
            type: "gl"
    steps:
      - name: Clone Repository
        uses: actions/checkout@main
      
      - name: Initialization environment
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          sudo timedatectl set-timezone "Asia/Shanghai"
          sudo -E swapoff -a
          sudo -E rm -f /swapfile
          sudo -E docker image prune -a -f
          sudo -E snap set system refresh.retain=2
          sudo -E apt-get -y purge dotnet* firefox ghc* google* llvm* mono* mysql* openjdk* php* zulu*
          sudo -E apt-get -y autoremove --purge
          sudo -E rm -rf /usr/share/dotnet /usr/local/lib/android/sdk /etc/mysql /etc/php /usr/local/share/boost
          [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo -E apt-get update -y
          sudo -E apt-get install -y ack antlr3 aria2 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp nano ninja-build p7zip p7zip-full patch pkgconf python3.8 python3-pip libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev libfuse-dev libfuse-dev python3-setuptools g++ file clang nano genisoimage
          sudo -E apt-get clean
          git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
          df -h
      
      - name: Clone source code
        env:
          REPO_URL: https://github.com/hanwckf/immortalwrt-mt798x
          REPO_BRANCH: openwrt-21.02
        run: |
          git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt-${{ matrix.soc || matrix.model }}
          cd openwrt-${{ matrix.soc || matrix.model }}
          cp -f ../diy/mt798x/op1.sh ./
          chmod +x ./op1.sh && ./op1.sh
      
      - name: Update & Install feeds
        working-directory: ./openwrt-${{ matrix.soc || matrix.model }}
        run: |
          ./scripts/feeds update -a
          ./scripts/feeds install -a
          cp -f ../diy/mt798x/op2.sh ./        
          chmod +x ./op2.sh && ./op2.sh

          sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='${{ matrix.description }}-$(date +%Y%m%d)'/g" package/base-files/files/etc/openwrt_release
          sed -i "s/OPENWRT_RELEASE=\"*.*\"/OPENWRT_RELEASE=\"${{ matrix.description }}-$(date +%Y%m%d) By DaoDao\"/g" package/base-files/files/usr/lib/os-release
      
      - name: Configuration Customization
        run: |
          [ -e "${{ matrix.config_file }}" ] && mv "${{ matrix.config_file }}" openwrt-${{ matrix.soc || matrix.model }}/.config
          cd openwrt-${{ matrix.soc || matrix.model }} && make defconfig
      
      - name: Download package
        working-directory: ./openwrt-${{ matrix.soc || matrix.model }}
        run: |
          make download -j$(nproc)
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;
      
      - name: Build firmware
        working-directory: ./openwrt-${{ matrix.soc || matrix.model }}
        run: |
          make -j$(nproc) V=s
      
      - name: Prepare artifacts
        id: prepare_artifacts
        run: |
          mkdir -p ${{ matrix.soc || matrix.model }}_out
          cp openwrt-${{ matrix.soc || matrix.model }}/.config ${{ matrix.soc || matrix.model }}_out/${{ matrix.soc || matrix.model }}.config
          
          getmd5()
          {
            md5sum=`md5sum $1`
            md5=`echo ${md5sum% *}`
            md5=`echo ${md5:0:10}`
          }
          
          if [ "${{ matrix.type }}" = "standard" ]; then
            models_json='[
              {
                "name": "Redmi-AX6000",
                "output_file": "immortalwrt-mediatek-mt7986-xiaomi_redmi-router-ax6000-squashfs-sysupgrade.bin"
              },
              {
                "name": "JDCloud-AX6000",
                "output_file": "immortalwrt-mediatek-mt7986-jdcloud_re-cp-03-squashfs-sysupgrade.bin"
              },
              {
                "name": "Netcore-N60",
                "output_file": "immortalwrt-mediatek-mt7986-netcore_n60-squashfs-sysupgrade.bin"
              },
              {
                "name": "360-T7",
                "output_file": "immortalwrt-mediatek-mt7981-mt7981-360-t7-108M-squashfs-sysupgrade.bin"
              },
              {
                "name": "KOMI-A31",
                "output_file": "immortalwrt-mediatek-mt7981-konka_komi-a31-squashfs-sysupgrade.bin"
              },
              {
                "name": "Xiaomi-AX3000T-MTK",
                "output_file": "immortalwrt-mediatek-mt7981-xiaomi_mi-router-ax3000t-squashfs-sysupgrade.bin"
              },
              {
                "name": "Xiaomi-AX3000T-MTK_an8855",
                "output_file": "immortalwrt-mediatek-mt7981-xiaomi_mi-router-ax3000t-an8855-squashfs-sysupgrade.bin"
              },
              {
                "name": "Cetron-CT3003",
                "output_file": "immortalwrt-mediatek-mt7981-cetron_ct3003-squashfs-sysupgrade.bin"
              },
              {
                "name": "CMCC-RAX3000M",
                "output_file": "immortalwrt-mediatek-mt7981-cmcc_rax3000m-squashfs-sysupgrade.bin"
              },
              {
                "name": "Nokia-AX3000",
                "output_file": "immortalwrt-mediatek-mt7981-nokia_ea0326gmp-squashfs-sysupgrade.bin"
              },
              {
                "name": "H3C-NX30Pro",
                "output_file": "immortalwrt-mediatek-mt7981-h3c_nx30pro-squashfs-sysupgrade.bin"
              },
              {
                "name": "JCG-Q30Pro",
                "output_file": "immortalwrt-mediatek-mt7981-jcg_q30-squashfs-sysupgrade.bin"
              },
              {
                "name": "Xiaomi-WR30U",
                "output_file": "immortalwrt-mediatek-mt7981-xiaomi_mi-router-wr30u-112m-squashfs-sysupgrade.bin"
              }
            ]'
            echo "$models_json" | jq -c '.[]' | while read -r model; do
              name=$(echo "$model" | jq -r '.name')
              output_file=$(echo "$model" | jq -r '.output_file')
              rom="openwrt-${{ matrix.soc || matrix.model }}/bin/targets/mediatek/${{ matrix.soc }}/$output_file"
              if [ -f "$rom" ]; then
                getmd5 "$rom"
                cp -a "$rom" "./${{ matrix.soc || matrix.model }}_out/AE86Wrt-$name-5.4-$(date +%Y%m%d)_${md5}.bin"
              else
                echo "⚠️ 文件不存在: $rom"
              fi
            done
          else
            rom=openwrt-${{ matrix.soc || matrix.model }}/bin/targets/mediatek/${{ matrix.soc_prefix }}/${{ matrix.output_file }}
            if [ -f "$rom" ]; then
              getmd5 "$rom"
              cp -a "$rom" "./${{ matrix.soc || matrix.model }}_out/${{ matrix.description }}-5.4-$(date +%Y%m%d)_${md5}.${{ matrix.output_suffix }}"
            else
              echo "⚠️ 文件不存在: $rom"
            fi
          fi
      
      - name: Upload Firmware Artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.soc || matrix.model }}-Firmware
          path: ${{ matrix.soc || matrix.model }}_out/AE86Wrt-*
      
      - name: Upload Config Artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.soc || matrix.model }}-config
          path: ${{ matrix.soc || matrix.model }}_out/${{ matrix.soc || matrix.model }}.config
      
      - name: Upload Packages Artifacts
        uses: actions/upload-artifact@main
        with:
          name: ${{ matrix.soc || matrix.model }}-Packages
          path: openwrt-${{ matrix.soc || matrix.model }}/bin/packages/*
  
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@main
        with:
          path: downloaded_artifacts
      
      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find downloaded_artifacts \( -name "*.bin" -o -name "*.tar" \) -exec cp {} release_assets \;
      
      - name: Generate release info
        id: release_info
        run: |
          echo "release_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "release_name=AE86Wrt-MT798x-5.4内核-$(date +%Y%m%d)" >> $GITHUB_OUTPUT
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          name: ${{ steps.release_info.outputs.release_name }}
          files: |
            release_assets/*
          token: ${{ secrets.GITHUB_TOKEN }}
