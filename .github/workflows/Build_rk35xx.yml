name: Build_rk35xx

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
  schedule:
    - cron: 1 20 * * 4

jobs:
  build:
    name: Build ${{ matrix.model }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        model: ["RK"]
        include:
          - model: "RK"
            config_file: "./configs/ARM/other/rk.config"
            file_name: "rk"
            type: "rk"

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free disk space
      uses: xiangfeidexiaohuo/actions@free-disk
      with:
        build-mount-path: /home/runner/work/AE86Wrt/AE86Wrt

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo -E apt-get update -y
        sudo -E apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs libnsl-dev nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev python3-setuptools g++ file clang nano genisoimage
        pip install aligo
        sudo -E apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/coolsnowwolf/lede
        REPO_BRANCH: master
      run: |
        git clone https://github.com/xiangfeidexiaohuo/AE86Wrt.git && mv ./AE86Wrt/* ./  && rm -rf ./AE86Wrt
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/lean/lean1.sh ./
        chmod +x ./lean1.sh && ./lean1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/lean/lean2.sh ./        
        chmod +x ./lean2.sh && ./lean2.sh    
        
        ## 强制默认rockchip编译内核为6.12  
        sed -i "s/KERNEL_PATCHVER:=*.*/KERNEL_PATCHVER:=6.12/g" target/linux/rockchip/Makefile
        sed -i "s/KERNEL_TESTING_PATCHVER:=*.*/KERNEL_TESTING_PATCHVER:=6.12/g" target/linux/rockchip/Makefile

        sed -i "s/DISTRIB_DESCRIPTION='*.*'/DISTRIB_DESCRIPTION='AE86Wrt-RK-$(date +%Y%m%d)'/g" package/lean/default-settings/files/zzz-default-settings
        sed -i "s/OPENWRT_RELEASE=\"*.*\"/OPENWRT_RELEASE=\"AE86Wrt-RK-$(date +%Y%m%d) By DaoDao\"/g" package/lean/default-settings/files/zzz-default-settings
       
              
    - name: Configuration Customization
      run: |
        [ -e "${{ matrix.config_file }}" ] && mv "${{ matrix.config_file }}" openwrt/.config
        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        make -j$(nproc) V=s
        
    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./ARM_Out
        mkdir -p ./ARM_Out/
        cp -a ./openwrt/.config ./ARM_Out/${{ matrix.file_name }}.config
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }


        if [ "${{ matrix.type }}" = "rk" ]; then
           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-neo3-squashfs-sysupgrade.img.gz
           getmd5 $rom            
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-Neo3-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2c-squashfs-sysupgrade.img.gz
           getmd5 $rom            
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R2C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz
           getmd5 $rom               
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R2S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2c-plus-squashfs-sysupgrade.img.gz
           getmd5 $rom            
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R2CPlus-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r2s-plus-squashfs-sysupgrade.img.gz
           getmd5 $rom               
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R2SPlus-6.12-$(date +%Y%m%d)_${md5}.img.gz



           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r3s-squashfs-sysupgrade.img.gz
           getmd5 $rom               
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R3S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
           getmd5 $rom        
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R4S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz
           getmd5 $rom        
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R4SE-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r5c-squashfs-sysupgrade.img.gz
           getmd5 $rom       
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R5C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r5s-squashfs-sysupgrade.img.gz
           getmd5 $rom      
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R5S-6.12-$(date +%Y%m%d)_${md5}.img.gz



           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r6c-squashfs-sysupgrade.img.gz
           getmd5 $rom           
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R6C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r6s-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R6S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopc-t6-squashfs-sysupgrade.img.gz
           getmd5 $rom        
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPC-T6-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopc-t4-squashfs-sysupgrade.img.gz
           getmd5 $rom        
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPC-T4-6.12-$(date +%Y%m%d)_${md5}.img.gz



           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-r76s-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-R76S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-friendlyarm_nanopi-m5-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-NanoPi-M5-6.12-$(date +%Y%m%d)_${md5}.img.gz



           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-fastrhino_r66s-squashfs-sysupgrade.img.gz
           getmd5 $rom       
           cp -a $rom ./ARM_Out/AE86Wrt-FastRhino-R66S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-fastrhino_r68s-squashfs-sysupgrade.img.gz
           getmd5 $rom     
           cp -a $rom ./ARM_Out/AE86Wrt-FastRhino-R68S-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-lyt_t68m-squashfs-sysupgrade.img.gz
           getmd5 $rom   
           cp -a $rom ./ARM_Out/AE86Wrt-LYT-T68M-6.12-$(date +%Y%m%d)_${md5}.img.gz



           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-h66k-squashfs-sysupgrade.img.gz
           getmd5 $rom     
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-H66K-6.12-$(date +%Y%m%d)_${md5}.img.gz
        
           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-h68k-squashfs-sysupgrade.img.gz
           getmd5 $rom           
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-H68K-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-h69k-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-H69K-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-h28k-squashfs-sysupgrade.img.gz
           getmd5 $rom           
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-H28K-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-h29k-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-H29K-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-hinlink_opc-ht2-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Hinlink-HT2-6.12-$(date +%Y%m%d)_${md5}.img.gz


           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-radxa_e20c-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Radxa-E20C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-radxa_e24c-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Radxa-E24C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-radxa_e25-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Radxa-E25-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-radxa_e52c-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Radxa-E52C-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-radxa_e54c-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-Radxa-E54C-6.12-$(date +%Y%m%d)_${md5}.img.gz


           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-xunlong_orangepi-5-max-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-OrangePi-5Max-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-xunlong_orangepi-5-plus-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-OrangePi-5Plus-6.12-$(date +%Y%m%d)_${md5}.img.gz

           rom=openwrt/bin/targets/rockchip/armv8/openwrt-rockchip-armv8-xunlong_orangepi-5-ultra-squashfs-sysupgrade.img.gz
           getmd5 $rom          
           cp -a $rom ./ARM_Out/AE86Wrt-OrangePi-5Ultra-6.12-$(date +%Y%m%d)_${md5}.img.gz
        fi

               
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.model }}-Firmware
        path: ARM_Out/*.img.gz 

    - name: Upload config
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.model }}-config
        path: ARM_Out/${{ matrix.file_name }}.config
 
    - name: Upload Packages
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.model }}-Packages
        path: openwrt/bin/packages 

  create_release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: downloaded_artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release_assets
          find downloaded_artifacts -name "*.img.gz" -exec cp {} release_assets \;

      - name: Generate release info
        id: release_info
        run: |
          echo "release_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
          echo "release_name=AE86Wrt-Rockchip-6.12内核-$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.release_info.outputs.release_tag }}
          name: ${{ steps.release_info.outputs.release_name }}
          files: |
            release_assets/*
          token: ${{ secrets.GITHUB_TOKEN }}

