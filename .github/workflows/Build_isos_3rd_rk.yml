name: Build_isos_3rd_rk

on: 
  repository_dispatch:
  workflow_dispatch:

# 定时触发编译
#  schedule:
#    - cron: 40 18 * * 5

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [armsr, rk]
        include:
          - arch: armsr
            config_url: "http://fw.koolcenter.com/iStoreOS/armsr/config.seed"
          - arch: rk
            config_url: "http://fw.koolcenter.com/iStoreOS/easepi-r1/config.seed"

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Free disk space
      uses: xiangfeidexiaohuo/actions@free-disk
      with:
        build-mount-path: /home/runner/work/AE86Wrt/AE86Wrt

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo apt-get update -y
        sudo apt-get install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libglib2.0-dev libgmp3-dev libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libreadline-dev libssl-dev libtool lrzsz mkisofs msmtp libnsl-dev nano ninja-build p7zip p7zip-full patch pkgconf python3 python3-pyelftools libpython3-dev qemu-utils rsync scons squashfs-tools subversion swig texinfo uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev libfuse-dev python3-setuptools g++ file clang nano genisoimage
        sudo apt-get clean
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        
    - name: Clone source code
      env: 
        REPO_URL: https://github.com/istoreos/istoreos
        REPO_BRANCH: istoreos-24.10
      run: |
        git clone https://github.com/xiangfeidexiaohuo/AE86Wrt.git && mv ./AE86Wrt/* ./  && rm -rf ./AE86Wrt
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
        cd openwrt
        cp -f ../diy/op/isos1.sh ./
        chmod +x ./isos1.sh && ./isos1.sh

    - name: Update & Install feeds
      working-directory: ./openwrt
      run: |
        ./scripts/feeds update -a

        ./scripts/feeds install -a

        cp -f ../diy/op/isos2.sh ./        
        chmod +x ./isos2.sh && ./isos2.sh       

        
    - name: Configuration Customization - Build_isos_3rd_rk
      env:
        CONFIG_FILE: './configs/ARM/other/isos_add.config'
      run: |
        wget -P  openwrt/ ${{ matrix.config_url }}
        [ -e $CONFIG_FILE ] && cat $CONFIG_FILE >> openwrt/config.seed
        mv openwrt/config.seed openwrt/.config
        sed -i 's/CONFIG_PACKAGE_px5g-mbedtls=y/CONFIG_PACKAGE_px5g-mbedtls=n/g' openwrt/.config

        cd openwrt && make defconfig
        
    - name: Download package
      working-directory: ./openwrt
      run: |
        make download -j$(nproc)
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Build firmware
      working-directory: ./openwrt
      run: |
        date '+%Y%m%d%H' > version
        if [ "${{ matrix.arch }}" = "rk" ]; then
           echo -n 77d4782035a23e6f19f9c4751451b4e3 > .vermagic
        elif [ "${{ matrix.arch }}" = "armsr" ]; then
           echo -n b388b781da4bc000e0f3f3a5a1a34eac > .vermagic
        fi

        make -j$(nproc) V=s

    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        rm -rf ./${{ matrix.arch }}_out
        mkdir -p ./${{ matrix.arch }}_out/
        cp -a ./openwrt/.config ./${{ matrix.arch }}_out/isos_${{ matrix.arch }}.config
        
        getmd5()
        {
        md5sum=`md5sum $1`
        md5=`echo ${md5sum% *}`
        md5=`echo ${md5:0:10}`
        }

        if [ "${{ matrix.arch }}" = "rk" ]; then
        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r2s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r2s_r2c-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r3s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r3s-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r4s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r4s-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r4se-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r4se-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r5s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r5s_r5c-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r6s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r6s_r6c-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-friendlyarm_nanopi-r76s-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-nanopi-r76s_r6c-$(date +%Y%m%d)_${md5}.img.gz


        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-radxa_e52c-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-radxa_e52c-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-radxa_e54c-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-radxa_e54c-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-radxa_e20c-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-radxa_e20c-$(date +%Y%m%d)_${md5}.img.gz


        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-lyt_t68m-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-lyt_t68m-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-lyt_t88m-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-lyt_t88m-$(date +%Y%m%d)_${md5}.img.gz


        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-hlink_h28k-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-hinlink_h28k-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-fastrhino_r6xs-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-fastrhino_r6xs-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-hinlink_opc-h6xk-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-hinlink_h6xk-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-hinlink_h88k-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-hinlink_h88k-$(date +%Y%m%d)_${md5}.img.gz


        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-easepi_r1-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-easepi_r1-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-easepi_r1-lite-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-easepi_r1-lite-$(date +%Y%m%d)_${md5}.img.gz

        rom=openwrt/bin/targets/rockchip/armv8/istoreos-rockchip-armv8-easepi_ars4-squashfs-sysupgrade.img.gz
        getmd5 $rom     
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-easepi_ars4-$(date +%Y%m%d)_${md5}.img.gz

        elif [ "${{ matrix.arch }}" = "armsr" ]; then
        rom=openwrt/bin/targets/armsr/armv8/istoreos-armsr-armv8-generic-squashfs-combined-efi.img.gz
        getmd5 $rom
        cp -a $rom ./${{ matrix.arch }}_out/istoreos-3rd-armsr-efi-$(date +%Y%m%d)_${md5}.img.gz
        fi
                 
    - name: Upload Firmwares
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.arch }}-Firmware
        path: ${{ matrix.arch }}_out/istoreos-*.img.gz

    - name: Upload config
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.arch }}-config
        path: ${{ matrix.arch }}_out/isos_*.config

    - name: Upload Packages
      uses: actions/upload-artifact@main
      with:
        name: ${{ matrix.arch }}-Packages
        path: openwrt/bin/packages/**

  create_release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@main
      with:
        path: downloaded_artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        find downloaded_artifacts -name "*.img.gz" -exec cp {} release_assets \;

    - name: Generate release info
      id: release_info
      run: |
        echo "release_tag=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT
        echo "release_name=isos-3rd-rockchip-armsr-$(date +%Y%m%d)" >> $GITHUB_OUTPUT

    - name: Create release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.release_tag }}
        name: ${{ steps.release_info.outputs.release_name }}
        files: |
          release_assets/*.img.gz
        token: ${{ secrets.GITHUB_TOKEN }}

